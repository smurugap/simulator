diff --git a/server.py b/server.py
index 88a943b..06b7eb5 100644
--- a/server.py
+++ b/server.py
@@ -178,9 +178,10 @@ class SSHUserPassController(ssh.ServerInterface):
     :param password: The password to allow.
     """
 
-    def __init__(self, username=None, password=None):
+    def __init__(self, username=None, password=None, queue=None):
         self.username = username
         self.password = password
+        self.queue = queue
         self.event = threading.Event()
 
     def get_allowed_auths(self, username):
@@ -222,7 +223,10 @@ class NetconfServerSession(base.NetconfSession):
 
         self.methods = server.server_methods
         super(NetconfServerSession, self).__init__(channel, debug, sid)
-        super(NetconfServerSession, self)._open_session(True)
+        try:
+            data = self.server.queue.get(timeout=3)
+        except:
+            super(NetconfServerSession, self)._open_session(True)
 
         if self.debug:
             logger.debug("%s: Client session-id %s created", str(self), str(sid))
@@ -279,7 +279,10 @@ class NetconfServerSession(base.NetconfSession):
             rpc_reply.getchildren  # pylint: disable=W0104
             reply.append(rpc_reply)
         except AttributeError:
-            reply.extend(rpc_reply)
+            try:
+                reply.extend(rpc_reply)
+            except TypeError:
+                reply.text = rpc_reply
         ucode = etree.tounicode(reply, pretty_print=True)
         if self.debug:
             logger.debug("%s: Sending RPC-Reply: %s", str(self), str(ucode))
@@ -302,7 +306,7 @@ class NetconfServerSession(base.NetconfSession):
         # Any error with XML encoding here is going to cause a session close
         # Technically we should be able to return malformed message I think.
         try:
-            tree = etree.parse(io.BytesIO(msg.encode('utf-8')))
+            tree = etree.parse(io.BytesIO(msg.encode('utf-8').strip()))
             if not tree:
                 raise ncerror.SessionError(msg, "Invalid XML from client.")
         except etree.XMLSyntaxError:
@@ -631,14 +635,17 @@ class NetconfSSHServer(sshutil.server.SSHServer):
     :param debug: True to enable debug logging.
     """
 
-    def __init__(self, server_ctl=None, server_methods=None, port=830, host_key=None, debug=False):
-        self.server_methods = server_methods if server_methods is not None else NetconfMethods()
+    def __init__(self, server_ctl=None, server_methods=None,
+                 port=830, host_key=None, debug=False, queue=None):
+        self.server_methods = server_methods \
+            if server_methods is not None else NetconfMethods()
         self.session_id = 1
         self.session_locks_lock = threading.Lock()
         self.session_locks = {
             "running": 0,
             "candidate": 0,
         }
+        self.queue = queue
         super(NetconfSSHServer, self).__init__(
             server_ctl,
             server_session_class=NetconfServerSession,
diff --git a/base.py b/base.py
index 23f6228..9a36d5f 100644
--- a/base.py
+++ b/base.py
@@ -18,6 +18,8 @@
 # limitations under the License.
 #
 from __future__ import absolute_import, division, unicode_literals, print_function, nested_scopes
+from gevent import monkey
+monkey.patch_all()
 import logging
 import io
 import socket
@@ -34,7 +36,8 @@ logger = logging.getLogger(__name__)
 
 NC_BASE_10 = "urn:ietf:params:netconf:base:1.0"
 NC_BASE_11 = "urn:ietf:params:netconf:base:1.1"
-XML_HEADER = """<?xml version="1.0" encoding="UTF-8"?>"""
+XML_HEADER = """<?xml version="1.0"?>"""
+#XML_HEADER = """<?xml version="1.0" encoding="UTF-8"?>"""
 
 if sys.version_info[0] >= 3:
 
@@ -178,11 +181,16 @@ class NetconfFramingTransport(NetconfPacketTransport):
     def _receive_10(self):
         searchfrom = 0
         while True:
+            self.rbuffer = self.rbuffer.strip()
             eomidx = self.rbuffer.find(b"]]>]]>", searchfrom)
             if eomidx != -1:
                 break
             searchfrom = max(0, len(self.rbuffer) - 5)
             buf = self.stream.recv(self.max_chunk)
+            if self.stream.closed:
+                if self.debug:
+                    logger.debug("MSENTHIL - Channel closed")
+                raise ChannelClosed(self)
             self.rbuffer += buf
 
         msg = self.rbuffer[:eomidx]
@@ -348,7 +356,7 @@ class NetconfSession(object):
         # The transport should be connected at this point.
         try:
             # Send hello message.
-            self.send_hello((NC_BASE_10, NC_BASE_11), self.session_id)
+            self.send_hello((NC_BASE_10, ), self.session_id)
 
             # Get reply
             reply = self._receive_message()
@@ -365,7 +373,7 @@ class NetconfSession(object):
                 self.capabilities.add(cap.text.strip())
 
             if NC_BASE_11 in self.capabilities:
-                self.new_framing = True
+                self.new_framing = False
             elif NC_BASE_10 not in self.capabilities:
                 who = "Server" if is_server else "Client"
                 raise SessionError("{} doesn't implement 1.0 or 1.1 of netconf".format(who))
